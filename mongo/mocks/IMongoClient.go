// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	object "datastore/domain"
)

// IMongoClient is an autogenerated mock type for the IMongoClient type
type IMongoClient struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, filter
func (_m *IMongoClient) Delete(ctx context.Context, filter interface{}) error {
	ret := _m.Called(ctx, filter)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, filter
func (_m *IMongoClient) Find(ctx context.Context, filter interface{}) (object.Object, error) {
	ret := _m.Called(ctx, filter)

	var r0 object.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (object.Object, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) object.Object); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(object.Object)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx, filter
func (_m *IMongoClient) FindAll(ctx context.Context, filter interface{}) ([]object.Object, error) {
	ret := _m.Called(ctx, filter)

	var r0 []object.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) ([]object.Object, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) []object.Object); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]object.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOne provides a mock function with given fields: ctx, _a1
func (_m *IMongoClient) InsertOne(ctx context.Context, _a1 object.Object) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, object.Object) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIMongoClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewIMongoClient creates a new instance of IMongoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIMongoClient(t mockConstructorTestingTNewIMongoClient) *IMongoClient {
	mock := &IMongoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
